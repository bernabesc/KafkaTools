package com.application;

import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;

import com.formdev.flatlaf.FlatDarkLaf;
import com.formdev.flatlaf.FlatLightLaf;
import com.kafkatools.KafkaSender;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class MainApplication extends JFrame {
	private static final long serialVersionUID = 1L;
	private JButton selectButton;
	private JButton sendJsonButton;
	private JTextField filePathField;
	private JLabel ipAddressLabel;
	private JTextField ipAddressField;
	private JTextField kafkaTopicField;
	private JFileChooser fileChooser;
	private JLabel kafkaTopicLabel;
	private JLabel filePathLabel;
	private JLabel label;
	private JLabel label_1;
	private JLabel label_2;
	private JLabel label_3;
	private JLabel label_4;
	private JLabel label_5;
	private JLabel label_6;
	
	public static void main(String[] args) {
		try {
			UIManager.setLookAndFeel(new FlatDarkLaf());
		} catch (UnsupportedLookAndFeelException e) {
			e.printStackTrace();
		}
		new MainApplication();
	}

	public MainApplication() {
		super("Send Json to Kafka 1.0 (Internal use ONLY)");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

		ipAddressLabel = new JLabel("Kafka IP Address:");
		ipAddressField = new JTextField(30);

		kafkaTopicLabel = new JLabel("Kafka Topic:");
		kafkaTopicField = new JTextField(30);

		filePathLabel = new JLabel("Json File:");
		filePathField = new JTextField(25);


		// Create the Select button and add an action listener
		selectButton = new JButton("Browse");
		selectButton.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				// Create the file chooser and set its properties
				fileChooser = new JFileChooser();

				File desktop = new File(System.getProperty("user.home"), "Desktop");
				fileChooser.setCurrentDirectory(desktop);                
				fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
				fileChooser.setAcceptAllFileFilterUsed(false);
				fileChooser.addChoosableFileFilter(new FileNameExtensionFilter("JSON files", "json"));
				fileChooser.setDialogTitle("Select a JSON file");
				fileChooser.setApproveButtonText("Open");
				fileChooser.setApproveButtonMnemonic(KeyEvent.VK_O);
				fileChooser.setApproveButtonToolTipText("Open the selected JSON file");

				if (fileChooser.showOpenDialog(MainApplication.this) == JFileChooser.APPROVE_OPTION) {
					File selectedFile = fileChooser.getSelectedFile();
					filePathField.setText(selectedFile.getAbsolutePath());
					sendJsonButton.setEnabled(true);
				}
			}
		});

		// Create the Send JSON button and add an action listener
		sendJsonButton = new JButton("Send JSON");
		sendJsonButton.setEnabled(false);
		sendJsonButton.addActionListener(sendToKafkaLogic());
		GridBagConstraints c = new GridBagConstraints();
		c.fill = GridBagConstraints.NONE;
		c.anchor = GridBagConstraints.CENTER;
		c.weightx = 1.0;
		getContentPane().setLayout(new GridLayout(0, 5, 0, 0));

		getContentPane().add(ipAddressLabel);
		getContentPane().add(ipAddressField);
		
		label = new JLabel("");
		getContentPane().add(label);
		
		label_1 = new JLabel("");
		getContentPane().add(label_1);


		getContentPane().add(kafkaTopicLabel);
		getContentPane().add(kafkaTopicField);
		
		label_2 = new JLabel("");
		getContentPane().add(label_2);


		getContentPane().add(filePathLabel);
		getContentPane().add(filePathField);
		
		label_3 = new JLabel("");
		getContentPane().add(label_3);
		
		label_4 = new JLabel("");
		getContentPane().add(label_4);


		getContentPane().add(selectButton);
		getContentPane().add(sendJsonButton);


		//Set Header Properties
		FlatLightLaf.setup(); //setting the look and feel
		JFrame.setDefaultLookAndFeelDecorated(true);
		getRootPane().putClientProperty("JRootPane.titleBarBackground", new Color(23,180,252));
		getRootPane().putClientProperty("JRootPane.titleBarForeground", Color.white);

		// Set the frame properties
		setSize(570, 336);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		getContentPane().setLayout(new FlowLayout());
		
		label_5 = new JLabel("");
		getContentPane().add(label_5);
		
		label_6 = new JLabel("");
		getContentPane().add(label_6);
		setLocationRelativeTo(null);
		setResizable(true);
		setVisible(true);

	}
	
	public ActionListener sendToKafkaLogic() {
		return new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				// Get the selected file and do something with it
				File selectedFile = fileChooser.getSelectedFile();
				System.out.println(selectedFile.getName());
				String message;
				if(!ipAddressField.getText().isEmpty()) {
					if(!kafkaTopicField.getText().isEmpty()) {
						try {
							KafkaSender sender = new KafkaSender(ipAddressField.getText());
							String json = new String(Files.readAllBytes(Paths.get(selectedFile.getAbsolutePath())));
							
							sender.sendJson(kafkaTopicField.getText(),"",json,null);
							message = String.format("Sent %s to kafka", selectedFile.getName());
						} catch (Exception e1) {
							message = String.format("Error: %s", e1.getCause());
						}
					}else {
						message = "Kafka Topic Field is blank";
					}
				}else {
					message = "IP field is blank";
				}
				JOptionPane.showMessageDialog(null, message);
			}
		};
		
	}
	
}